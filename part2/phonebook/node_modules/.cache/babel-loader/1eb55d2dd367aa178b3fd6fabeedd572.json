{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lap13366-local/Documents/self-learning/FullStackOpen2020/part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\nimport personService from './services/person';\nimport Persons from \"./components/Persons\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewPhone] = useState('');\n  const [searchName, setSearchName] = useState('');\n  const [notification, setNotification] = useState({\n    message: null,\n    isSuccess: false\n  });\n  useEffect(() => {\n    personService.getAll().then(persons => setPersons(persons));\n  }, []);\n\n  const addPerson = event => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    console.log(personObject);\n    personService.create(personObject).then(personObject => {\n      setPersons(persons.concat(personObject));\n      setNotification({\n        message: `Added ${newName}`,\n        isSuccess: true\n      });\n    }).catch(error => {\n      console.log(error.response.data);\n      setNotification({\n        message: error.response.data.error,\n        isSuccess: false\n      });\n    });\n    setTimeout(() => setNotification({\n      message: null,\n      isSuccess: false\n    }), 2000); // const filterPerson = persons.filter(person => person.name === newName)\n    // if (filterPerson.length === 0){\n    //\n    // }\n    // else\n    //     if(window.confirm(`${newName} is already added to phonebook, replace a old number with a new one?`)) {\n    //         const changedPerson = {...filterPerson[0], number: newNumber}\n    //         console.log('changedPerson', changedPerson)\n    //         personService\n    //             .update(changedPerson.id, changedPerson)\n    //             .then(returnedPerson => {\n    //                 setPersons(persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n    //                 setNotification({\n    //                     message: `Updated ${newName}`,\n    //                     isSuccess: true\n    //                 })\n    //             })\n    //             .catch(error => {\n    //                 setNotification({\n    //                     message: `Information of ${newName} has already been removed from server`,\n    //                     isSuccess: false\n    //                 })\n    //                 setPersons(persons.filter(person => person.name !== newName))\n    //                 console.log(error)\n    //             })\n    //         setTimeout(() => setNotification({\n    //             message: null,\n    //             isSuccess: false\n    //         }), 2000)\n    //     }\n\n    setNewName('');\n    setNewPhone('');\n  };\n\n  const deletePerson = person => {\n    console.log(person.name);\n    if (window.confirm(`Do you really want to delete ${person.name}`)) personService.remove(person.id).then(result => {\n      setPersons(persons.filter(p => p.id !== person.id));\n      setNotification({\n        message: `Removed ${person.name}`,\n        isSuccess: true\n      });\n    });\n  };\n\n  const handlePersonChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneChange = event => {\n    setNewPhone(event.target.value);\n  };\n\n  const handleSearchName = event => {\n    setSearchName(event.target.value);\n  };\n\n  const searchPersons = searchName === '' ? persons : persons.filter(person => person.name.toLocaleLowerCase().includes(searchName.toLocaleLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      isSuccess: notification.isSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Search phone number by name (insensitive)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      searchName: searchName,\n      handleSearchName: handleSearchName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      addPerson: addPerson,\n      newName: newName,\n      newNumber: newNumber,\n      handlePersonChange: handlePersonChange,\n      handlePhoneChange: handlePhoneChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      searchPersons: searchPersons,\n      deletePerson: deletePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"l6D2SUBizjUictVm2TgwJQGi7o4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lap13366-local/Documents/self-learning/FullStackOpen2020/part2/phonebook/src/App.js"],"names":["React","useState","useEffect","personService","Persons","Filter","PersonForm","Notification","App","persons","setPersons","newName","setNewName","newNumber","setNewPhone","searchName","setSearchName","notification","setNotification","message","isSuccess","getAll","then","addPerson","event","preventDefault","personObject","name","number","console","log","create","concat","catch","error","response","data","setTimeout","deletePerson","person","window","confirm","remove","id","result","filter","p","handlePersonChange","target","value","handlePhoneChange","handleSearchName","searchPersons","toLocaleLowerCase","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport './index.css'\nimport personService from './services/person'\nimport Persons from \"./components/Persons\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\"\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewPhone ] = useState('')\n  const [ searchName, setSearchName ] = useState('')\n  const [notification, setNotification] = useState({message: null, isSuccess: false})\n\n  useEffect(() =>{\n      personService\n          .getAll()\n          .then(persons => setPersons(persons))\n  }, [])\n\n  const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n              name: newName,\n              number: newNumber\n          }\n          console.log(personObject)\n          personService\n              .create(personObject)\n              .then(personObject => {\n                  setPersons(persons.concat(personObject))\n                  setNotification({\n                      message: `Added ${newName}`,\n                      isSuccess: true})\n                  }\n              ).catch(error => {\n                  console.log(error.response.data)\n                  setNotification({\n                      message: error.response.data.error,\n                      isSuccess: false\n                  })\n          })\n          setTimeout(() => setNotification({\n              message: null,\n              isSuccess: false\n          }), 2000)\n      // const filterPerson = persons.filter(person => person.name === newName)\n      // if (filterPerson.length === 0){\n      //\n      // }\n      // else\n      //     if(window.confirm(`${newName} is already added to phonebook, replace a old number with a new one?`)) {\n      //         const changedPerson = {...filterPerson[0], number: newNumber}\n      //         console.log('changedPerson', changedPerson)\n      //         personService\n      //             .update(changedPerson.id, changedPerson)\n      //             .then(returnedPerson => {\n      //                 setPersons(persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n      //                 setNotification({\n      //                     message: `Updated ${newName}`,\n      //                     isSuccess: true\n      //                 })\n      //             })\n      //             .catch(error => {\n      //                 setNotification({\n      //                     message: `Information of ${newName} has already been removed from server`,\n      //                     isSuccess: false\n      //                 })\n      //                 setPersons(persons.filter(person => person.name !== newName))\n      //                 console.log(error)\n      //             })\n      //         setTimeout(() => setNotification({\n      //             message: null,\n      //             isSuccess: false\n      //         }), 2000)\n      //     }\n      setNewName('')\n      setNewPhone('')\n    }\n\n  const deletePerson = (person) => {\n        console.log(person.name)\n        if (window.confirm(`Do you really want to delete ${person.name}`))\n            personService\n                .remove(person.id)\n                .then((result) => {\n                    setPersons(persons.filter(p => p.id !== person.id))\n                    setNotification({\n                         message: `Removed ${person.name}`,\n                         isSuccess: true\n                     })\n                })\n    }\n\n  const handlePersonChange = (event) => {\n      setNewName(event.target.value)\n  }\n\n  const handlePhoneChange = (event) => {\n      setNewPhone(event.target.value)\n  }\n\n  const handleSearchName = (event) => {\n      setSearchName(event.target.value)\n  }\n\n  const searchPersons = searchName === ''\n      ? persons\n      : persons.filter(person => person.name.toLocaleLowerCase().includes(searchName.toLocaleLowerCase()))\n\n  return (\n    <div>\n      <Notification message={notification.message} isSuccess={notification.isSuccess}/>\n      <h2>Search phone number by name (insensitive)</h2>\n      <Filter searchName={searchName} handleSearchName={handleSearchName}/>\n      <h2>Phonebook</h2>\n      <PersonForm addPerson={addPerson} newName={newName} newNumber={newNumber} handlePersonChange={handlePersonChange} handlePhoneChange={handlePhoneChange}/>\n      <h2>Numbers</h2>\n      <Persons searchPersons={searchPersons} deletePerson={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}